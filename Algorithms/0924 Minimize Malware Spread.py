import collections

# Solution 1, Union Find
class UFS:
    def __init__(self):
        self.cnt = 0
        self.d = {} # parents
        self.ranks = {}
        
    def add(self, i):
        self.d[i] = i
        self.ranks[i] = 1
        self.cnt += 1
        
    def find_parents(self, i):
        v = i
        while v != self.d[v]:
            self.d[v] = self.d[self.d[v]]
            v = self.d[v]
        self.d[i] = v
        return v

    def union(self, i, j):
        pi = self.find_parents(i)
        pj = self.find_parents(j)
        if pi != pj:
            self.d[pi] = pj
            self.cnt -= 1
            self.ranks[pj] += self.ranks[pi]

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        d = collections.defaultdict(set)
        
        n = len(graph)
        uf = UFS()
        
        for i in range(n):
            d[i].add(i)
            uf.add(i)
            for j in range(i):
                if graph[i][j] == 1:
                    d[i].add(j)
                    d[j].add(i)
                    uf.union(i, j)
                    
        cnts = collections.Counter(uf.find_parents(i) for i in initial)
        
        res, res_val = min(initial), -1
        
        for i in initial:
            pi = uf.find_parents(i)
            if cnts[pi] == 1:
                if uf.ranks[pi] > res_val:
                    res, res_val = i, uf.ranks[pi]
                elif uf.ranks[pi] == res_val and i < res:
                    res, res_val = i, uf.ranks[pi]
        return res
            
# Solution 2, DFS